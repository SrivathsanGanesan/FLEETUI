import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { take, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./ngx-capture.service";
export class NgxCaptureComponent {
    constructor(captureService) {
        this.captureService = captureService;
        this.resultImage = new EventEmitter();
        this.isDrawing = false;
        this.mouseStart = { x: 0, y: 0 };
        this.cropDimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
        };
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        setTimeout(() => {
            this.rect = this.rectangle.nativeElement;
            this.captureZone = this.overlay.nativeElement;
            if (!this.captureZone) {
                console.warn('"captureZone" is not set');
                return;
            }
            this.captureZone.onmousedown = (e) => this.startCapture(e);
            this.captureZone.onmousemove = (e) => this.drawRect(e);
            this.captureZone.onmouseup = () => this.endCapture();
        }, 2000);
    }
    startCapture(e) {
        const mouse = this.setMousePosition(e, true);
        this.isDrawing = true;
        this.cropDimensions = {
            x: mouse.x,
            y: mouse.y,
            width: 0,
            height: 0,
        };
        this.captureZone.style.cursor = 'crosshair';
    }
    drawRect(e) {
        if (this.isDrawing) {
            const mouse = this.setMousePosition(e, false);
            this.cropDimensions = {
                x: mouse.x - this.mouseStart.x < 0 ? mouse.x : this.mouseStart.x,
                y: mouse.y - this.mouseStart.y < 0 ? mouse.y : this.mouseStart.y,
                width: Math.abs(mouse.x - this.mouseStart.x),
                height: Math.abs(mouse.y - this.mouseStart.y),
            };
            this.setRectangle();
        }
    }
    setMousePosition(e, isStart = false) {
        const ev = e || window.event; // Moz || IE
        const mouse = { x: 0, y: 0 };
        if (ev.pageX) {
            // Moz
            mouse.x = ev.clientX;
            mouse.y = ev.clientY;
        }
        else if (ev.clientX) {
            // IE
            mouse.x = ev.clientX + document.body.scrollLeft;
            mouse.y = ev.clientY + document.body.scrollTop;
        }
        if (isStart) {
            this.mouseStart.x = mouse.x;
            this.mouseStart.y = mouse.y;
        }
        return mouse;
    }
    endCapture() {
        this.captureZone.style.cursor = 'default';
        this.isDrawing = false;
        this.captureService
            .getImage(this.target, false, {
            ...this.cropDimensions,
            x: this.cropDimensions.x + window.scrollX,
            y: this.cropDimensions.y + window.scrollY,
        })
            .pipe(take(1), tap((img) => {
            this.resultImage.emit(img);
        }))
            .subscribe();
        this.cropDimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
        };
        this.setRectangle();
    }
    setRectangle() {
        this.rect.style.left = this.cropDimensions.x + 'px';
        this.rect.style.top = this.cropDimensions.y + 'px';
        this.rect.style.width = this.cropDimensions.width + 'px';
        this.rect.style.height = this.cropDimensions.height + 'px';
    }
}
NgxCaptureComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.8", ngImport: i0, type: NgxCaptureComponent, deps: [{ token: i1.NgxCaptureService }], target: i0.ɵɵFactoryTarget.Component });
NgxCaptureComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.8", type: NgxCaptureComponent, selector: "ngx-capture", inputs: { target: "target" }, outputs: { resultImage: "resultImage" }, viewQueries: [{ propertyName: "rectangle", first: true, predicate: ["rect"], descendants: true, static: true }, { propertyName: "overlay", first: true, predicate: ["over"], descendants: true, static: true }], ngImport: i0, template: `
    <ng-content></ng-content>
    <div class="overlay" #over>
      <div class="rectangle" #rect></div>
    </div>
  `, isInline: true, styles: [".overlay{top:0;left:0;position:fixed;width:100vw;height:100vh}.rectangle{border:1px solid #ff0000;position:absolute}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.8", ngImport: i0, type: NgxCaptureComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-capture', template: `
    <ng-content></ng-content>
    <div class="overlay" #over>
      <div class="rectangle" #rect></div>
    </div>
  `, styles: [".overlay{top:0;left:0;position:fixed;width:100vw;height:100vh}.rectangle{border:1px solid #ff0000;position:absolute}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NgxCaptureService }]; }, propDecorators: { rectangle: [{
                type: ViewChild,
                args: ['rect', { static: true }]
            }], overlay: [{
                type: ViewChild,
                args: ['over', { static: true }]
            }], target: [{
                type: Input
            }], resultImage: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,